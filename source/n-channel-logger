#!/usr/bin/env python3

import argparse
import sys
import serial
from datetime import date,datetime

logfile_date=None
logfile = None


def log_data( line ):
    global args
    global logfile_date
    global logfile

    create_new_logfile = False
    current_date = date.today()

    if not logfile_date:
        logfile_date=current_date
        create_new_logfile = True
    elif logfile_date != current_date:
        logfile_date = current_date
        create_new_logfile = True

    if create_new_logfile:
        if logfile:
            logfile.close()
        logfile = open(f"{args.directory}/{args.prefix}-{current_date}.dat",mode="a+")

    if args.time_stamping:
        line.insert(0,datetime.now().astimezone().isoformat(timespec='milliseconds'))

    logfile.write(" ".join(line) + "\n" )
    logfile.flush()  # Make sure it's on disk

parser = argparse.ArgumentParser(
                    prog='n-channel-logger',
                    description='Logs a string of whitespace-separeted data fields into timestamped logfiles.',
                    epilog='(c) 2023-2024 karsten@benz-engineering.co.nz')
parser.add_argument('device',help='Data source')
parser.add_argument('-d','--directory',default='.',help='Target directory for logfiles')
parser.add_argument('-p','--prefix',default='log-',help='Prefix for log files')
parser.add_argument('-t','--time-stamping',action='store_true',help='Prepend per-second timestamp in ISO format')
parser.add_argument('-c','--crc16-verification',action='store_true',help='Verifies the CRC-16 at end of record')


args=parser.parse_args()

print(args)

if args.device == '-':

    while True:

        try:
            line=sys.stdin.readline().split()
        except EOFError:
            print("% EOF detected.")
            break;

        if len(line) == 0:
            print("% No input.")
            break;

        print(len(line),line)
        log_data(line)

else:


    ser = serial.Serial(args.device)

    while(ser.is_open):
        line=ser.readline().decode("utf-8").split()
        log_data(line)

    ser.close()

