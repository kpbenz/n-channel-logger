#!/usr/bin/env python3
# pylint: disable=C0103
'''
Logs a string of whitespace-separeted data fields into timestamped logfiles.
'''

import argparse
import sys
from datetime import date,datetime
import serial

__version__ = "1.0"

def log_data( log_line: list[str] ):
    '''
    Handles logging:
        - Creates new logfile if necessary.
        - Appends data to existing logfile.
        - Flushes data if argument is set.
    '''

    create_new_logfile = False
    current_date = date.today()

    if log_data.date != current_date:
        log_data.date = current_date
        create_new_logfile = True

    if create_new_logfile:
        if log_data.file:
            log_data.file.close()
        log_data.file = open(f"{args.directory}/{args.prefix}-{current_date}.dat",
                             mode="a+", encoding="utf-8")

    if args.time_stamping:
        log_line.insert(0,datetime.now().astimezone().isoformat(timespec='milliseconds'))

    log_data.file.write(" ".join(log_line) + "\n" )
    if args.flush:
        log_data.file.flush()  # Make sure it's on disk

# initialiase function variables
log_data.date = None
log_data.file = None

# CRC-16/XMODEM implementation
#
def crc16(data: bytes):
    '''
    CRC-16/XMODEM Algorithm
    '''
    data = bytearray(data)
    crc = 0
    for b in data:
        crc = (crc << 8) | ((crc >> 8) & 0xFF)
        cur_byte = b & 0xFF
        crc ^= cur_byte
        crc^=(crc &0xff)>>4
        crc^=(crc << 12)
        crc^=(crc &0xff)<<5

    return crc & 0xFFFF

def crc_check(line_check: str) -> bool:
    '''
    Find the space that separates the last
    token of the log and the CRC
    '''
    last_space_pos = line_check.rfind(' ')

    # shortes line: 'x CRC\n'
    if last_space_pos < 1:
        return False

    try:
        crc_read = int(line_check[last_space_pos:].strip(),base=16)
    except ValueError:
        return False

    crc_calc = crc16(line_check[0:last_space_pos].encode(encoding='utf-8', errors='ignore'))

    if crc_calc != crc_read:
        return False
    return True



parser = argparse.ArgumentParser(prog='n-channel-logger',
        description='Logs a string of whitespace-separeted data fields into timestamped logfiles.',
        epilog='(c) 2023-2024 karsten@benz-engineering.co.nz')
parser.add_argument('-V','--version', action='version',
        version=f'%(prog)s v{__version__}')
parser.add_argument('device',
        help='Data source')
parser.add_argument('-d','--directory',default='.',
        help='Target directory for logfiles')
parser.add_argument('-p','--prefix',default='log',
        help='Prefix for log files')
parser.add_argument('-t','--time-stamping',action='store_true',
        help='Prepend per-second timestamp in ISO format')
parser.add_argument('-c','--crc16-verification',action='store_true',
        help='Verifies the CRC-16 at end of record')
parser.add_argument('-f','--flush',action='store_true',
        help='Flushes logs after every write')
parser.add_argument('-v','--verbose',action='store_true',
        help='Print received strings to stdout')

args=parser.parse_args()

# Print args for debugging
# print(args)

if args.device == '-':

    while True:

        try:
            raw_line=sys.stdin.readline()
        except EOFError:
            print("% EOF detected.")
            break
        except IOError as e:
            print(f"% I/O error: {e}.")
            break
        # pylint: disable=W0718
        except Exception as e:
            print(f"% Unknown error: {e}.")
            break

        line=raw_line.split()

        if len(line) == 0:
            print(f"% No input. ({raw_line})")
            continue

        if args.crc16_verification and not crc_check(raw_line):
            line.append("*** CRC-CHECK FAILED ***")

        if args.verbose:
            print(datetime.now().astimezone().isoformat(timespec='milliseconds'),line)

        log_data(line)

else:

    ser = serial.Serial(args.device) # defaults: 9600 8N1

    while ser.is_open:
        try:
            raw_line = ser.readline()
            raw_line_decoded = raw_line.decode('utf-8',errors='backslashreplace')
        except EOFError:
            print("% EOF detected.")
            break
        except KeyboardInterrupt:
            print("% Keyboard interrupt.")
            break
        except IOError as e:
            print(f"% I/O error: {e}.")
            break
        # pylint: disable=W0718
        except Exception as e:
            print(f"% Unknown error: {e}.\nRaw line: '{raw_line}'")
            break

        line=raw_line_decoded.split()

        if len(line) == 0:
            print(f"% No input. ({raw_line})")
            continue

        if args.crc16_verification and not crc_check(raw_line_decoded):
            line.append("*** CRC-CHECK FAILED ***")

        if args.verbose:
            print(datetime.now().astimezone().isoformat(timespec='milliseconds'),line)

        log_data(line)

    ser.close()
